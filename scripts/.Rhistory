# Creates model sensitivity figure
rm(list = ls())
library('readxl')
library('gridExtra')
library('svglite')
library('ggplot2')
library('dplyr')
library('tidyr')
library('data.table')
source('../functions/ggsave2x.R')
source('../functions/dfcombos.R')
# Load data
ref_emis <- read_excel('../data/ref_emis.xlsx')
dat_stacked <- read.csv('../data/dat_stacked.csv')
#slurry produced in barn
sum_barn_slurry <- dat_stacked %>% select(mass, period, treatment) %>% filter(!is.na(mass), period != 4, !is.na(period)) %>%
mutate(diff = c(0,diff(mass))) %>% group_by(treatment, period) %>% filter(diff > 0) %>%  summarise(cum_slurry = sum(diff))
#slurry flushed to storage
summary_barn_parms <- data.frame(read.csv('../data/summary_barn_parms.csv'))
# extra parms for unit conversion in storage
summary_storage_parms <- data.frame(read.csv('../data/summary_storage_parms.csv'))
mean_storage_slurry <- summary_storage_parms[summary_storage_parms$parm == 'slurry_mass_mean', ]
#emissions from barn and storage
summary_barn <- data.frame(read.csv('../data/summary_barn.csv'))
summary_storage <- data.frame(read.csv('../data/summary_storage.csv'))
meas_C <- as.data.frame(read_excel('../data/dat_simple.xlsx', sheet = "C"))
# convert emission from averaged g CH4/day to kg CH4/year/m3 slurry excreted from animal
sum_barn_slurry <- data.frame(summarise(group_by(sum_barn_slurry, treatment), slurry_cum = sum(cum_slurry/1000, na.rm = T)))
summary_barn$C <- summary_barn$C/1000 * 365/ (sum_barn_slurry$slurry_cum[sum_barn_slurry$treatment == 'control'] * 365/ summary_barn_parms$scores[summary_barn_parms$treat == 'C' & summary_barn_parms$parm == 'time'])
summary_barn$FF <- summary_barn$FF/1000 * 365/ (sum_barn_slurry$slurry_cum[sum_barn_slurry$treatment == 'frequentflushing'] * 365 / summary_barn_parms$scores[summary_barn_parms$treat == 'FF' & summary_barn_parms$parm == 'time'])
summary_barn$SF <- summary_barn$SF/1000 * 365/ (sum_barn_slurry$slurry_cum[sum_barn_slurry$treatment == 'slurryfunnels'] * 365 / summary_barn_parms$scores[summary_barn_parms$treat == 'SF' & summary_barn_parms$parm == 'time'])
summary_barn$ST <- summary_barn$ST/1000 * 365/ (sum_barn_slurry$slurry_cum[sum_barn_slurry$treatment == 'slurrytrays'] * 365 / summary_barn_parms$scores[summary_barn_parms$treat == 'ST' & summary_barn_parms$parm == 'time'])
# kg CH4 / year / ton slurry ab barn
# convert emission from averaged g CH4/day to kg CH4/year/m3 slurry excreted ab barn
sum_barn_eff_slurry <- summary_barn_parms[summary_barn_parms$parm == 'slurry_mass_eff',] %>% mutate(scores = scores / 1000)
summary_storage$C <- summary_storage$C/1000 * 365 / (sum_barn_eff_slurry$scores[sum_barn_eff_slurry$treat == 'C'] * 365/ summary_barn_parms$scores[summary_barn_parms$treat == 'C' & summary_barn_parms$parm == 'time']) # kg CH4 / year / ton slurry ab barn
summary_storage$FF <- summary_storage$FF/1000 * 365 / (sum_barn_eff_slurry$scores[sum_barn_eff_slurry$treat == 'FF'] * 365 / summary_barn_parms$scores[summary_barn_parms$treat == 'FF' & summary_barn_parms$parm == 'time']) # kg CH4 / year / ton slurry ab barn
summary_storage$SF <- summary_storage$SF/1000 * 365 / (sum_barn_eff_slurry$scores[sum_barn_eff_slurry$treat == 'SF'] * 365 / summary_barn_parms$scores[summary_barn_parms$treat == 'SF' & summary_barn_parms$parm == 'time']) # kg CH4 / year / ton slurry ab barn
summary_storage$ST <- summary_storage$ST/1000 * 365 / (sum_barn_eff_slurry$scores[sum_barn_eff_slurry$treat == 'ST'] * 365 / summary_barn_parms$scores[summary_barn_parms$treat == 'ST' & summary_barn_parms$parm == 'time']) # kg CH4 / year / ton slurry ab barn
# kg CH4 / year / ton slurry present in storage
#mean_storage_slurry <- mean_storage_slurry %>% mutate(scores = scores/1000)
#summary_storage$C <- summary_storage$C/1000 * 365 / mean_storage_slurry$scores[mean_storage_slurry$treat == 'C']
#summary_storage$FF <- summary_storage$FF/1000 * 365 / mean_storage_slurry$scores[mean_storage_slurry$treat == 'FF']
#summary_storage$SF <- summary_storage$SF/1000 * 365 / mean_storage_slurry$scores[mean_storage_slurry$treat == 'SF']
#summary_storage$ST <- summary_storage$ST/1000 * 365 / mean_storage_slurry$scores[mean_storage_slurry$treat == 'ST']
summary_net <- cbind(summary_barn[, !names(summary_barn) %in% c('alpha_opt','qhat_opt')] + summary_storage[, !names(summary_storage) %in% c('alpha_opt','qhat_opt')], summary_barn[, c('alpha_opt', 'qhat_opt')])
summary_dat <- rbind(cbind(summary_barn, source = 'Barn'), cbind(summary_storage, source = 'Storage'), cbind(summary_net, source = 'Net'))
summary_dat$reduction_FF <- (1 - summary_dat$FF/summary_dat$C) * 100
summary_dat$reduction_SF <- (1 - summary_dat$SF/summary_dat$C) * 100
summary_dat$reduction_ST <- (1 - summary_dat$ST/summary_dat$C) * 100
# Clean and reshape
ref_emis$animal <- factor(ref_emis$animal, levels = c('Finisher', 'Gestating sow', 'Farrowing sow', 'Weaner'))
summary_dat_long <- summary_dat %>% pivot_longer(c(reduction_FF, reduction_SF, reduction_ST),
names_to = 'treat', values_to = 'reduction')
summary_dat_long$source <- factor(summary_dat_long$source, levels = c("Barn", "Storage", "Net"))
new.lab <- as_labeller(c(reduction_FF = "W.~flush.~(WF)", reduction_SF = "S.~funnels.~(SF)", reduction_ST= "Slurry~trays~(ST)",
Barn = "Barn", Storage = "Storage", Net = "Net"), label_parsed)
# More data processing for plot
summary_dat_long <- data.table(summary_dat_long)
summary_dat_long$varied <- NA
summary_dat_long$varied[summary_dat_long$alpha_opt == 1] <- 'a qhat'
summary_dat_long$varied[summary_dat_long$qhat_opt == 1] <- 'b alpha'
summary_dat_long$varied[summary_dat_long$qhat_opt != 1 & summary_dat_long$alpha_opt != 1] <- 'c both'
summary_dat_long$x <- summary_dat_long$qhat_opt
summary_dat_long$x[summary_dat_long$qhat_opt == 1] <- summary_dat_long$alpha_opt[summary_dat_long$qhat_opt == 1]
summary_dat_long$x <- log10(summary_dat_long$x)
ref1 <- summary_dat_long[summary_dat_long$qhat_opt == 1 & summary_dat_long$alpha_opt == 1, ]
ref1$varied <- NULL
ref1 <- dfcombos(ref1, data.frame(varied = unique(summary_dat_long$varied)))
summary_dat_long <- rbind(summary_dat_long, ref1)
summary_dat_long <- summary_dat_long[order(summary_dat_long$varied, summary_dat_long$qhat_opt * summary_dat_long$alpha_opt), ]
ref <- unique(summary_dat_long[, c('C', 'alpha_opt', 'qhat_opt', 'varied', 'x', 'source')])
ref$treat <- 'Control (C)'
# Plots
cols <- scales::hue_pal()(3)
dd <- subset(ref, alpha_opt == 1 & qhat_opt == 1)
refplot <- ggplot(ref, aes(x, C, colour = varied)) +
geom_point(data = dd, colour = 'gray55', size = 2) +
geom_path() +
theme_bw() +
facet_grid(source~factor(treat)) +
labs(x = expression('Log'[10]~'par. adj.'), y = expression('Emission rate'~(kg~CH[4]~m^'3'~yr^'-1')), tag = 'B') +
scale_colour_manual(name = 'Parameter', values = cols,
labels = expression(q['max, opt'], alpha['opt'], 'Both')) +
theme(legend.position = 'none')
refplot
dd <- subset(summary_dat_long, alpha_opt == 1 & qhat_opt == 1)
redplot <- ggplot(summary_dat_long, aes(x, reduction, colour = varied)) +
geom_point(data = dd, colour = 'gray55', size = 2) +
geom_path() +
theme_bw() +
facet_grid(source~treat, labeller = new.lab, scales = 'free_y') +
labs(x = expression('Log'[10]~'parameter adjustment'), y = 'Emission reduction (%)', tag = 'C') +
theme(legend.position = 'right') +
scale_colour_manual(name = 'Parameter', values = cols,
labels = expression(q['max, opt'], alpha['opt'], 'Both'))
redplot
refemisplot <- ggplot(ref_emis, aes(x = animal, y = CH4)) + geom_boxplot(varwidth = TRUE) + geom_jitter(width = 0.2) + theme_bw() +
labs(x ="", y = expression('Methane emission rate'~(g~pig^'-1'~d^'-1')), colour = "", tag = 'A') +
stat_summary(fun.y ="mean", color="red")
p_all <- grid.arrange(refemisplot, refplot, redplot, widths = c(1.5,4), heights = c(2.5,4), layout_matrix = rbind(c(1), c(2,3)))
svglite("../figures/fig_predict.svg", width = 18/2.54, height = 18/2.54)
grid::grid.draw(p_all)
dev.off()
png('../figures/fig_predict.png',  width = 18/2.54, height = 18/2.54, units = 'in', res = 600)
grid::grid.draw(p_all)
dev.off()
pdf('../figures/fig_predict.pdf',  width = 18/2.54, height = 18/2.54)
grid::grid.draw(p_all)
dev.off()
# summarise results
sum_reference <- filter(summary_dat_long, alpha_opt == 1, qhat_opt == 1)
summarise(group_by(summary_dat_long, treat, source), mean(C, na.rm = T), min(reduction, na.rm = T), max(reduction, na.rm = T), mean(reduction, na.rm = T), median(reduction, na.rm = T))
# get results from reference situation and emission ratio
barn_reference <- data.table(summary_barn)[alpha_opt == 1.0 & qhat_opt == 1.0, C]
storage_reference <- data.table(summary_storage)[alpha_opt == 1.0 & qhat_opt == 1.0, C]
barn_reference/(storage_reference + barn_reference)
# check reasons for reductions in storage with frequent flushing techniques
summary_storage_parms <- data.frame(read.csv('../data/summary_storage_parms.csv'))
ggplot(summary_storage_parms, aes(x = treat, y = scores)) + geom_point() + facet_wrap(~parm, scales = "free")
p_all
grid.draw(p_all)
grid::grid.draw(p_all)
# Creates model sensitivity figure
rm(list = ls())
library('readxl')
library('gridExtra')
library('svglite')
library('ggplot2')
library('dplyr')
library('tidyr')
library('data.table')
source('../functions/ggsave2x.R')
source('../functions/dfcombos.R')
# Load data
ref_emis <- read_excel('../data/ref_emis.xlsx')
dat_stacked <- read.csv('../data/dat_stacked.csv')
#slurry produced in barn
sum_barn_slurry <- dat_stacked %>% select(mass, period, treatment) %>% filter(!is.na(mass), period != 4, !is.na(period)) %>%
mutate(diff = c(0,diff(mass))) %>% group_by(treatment, period) %>% filter(diff > 0) %>%  summarise(cum_slurry = sum(diff))
#slurry flushed to storage
summary_barn_parms <- data.frame(read.csv('../data/summary_barn_parms.csv'))
# extra parms for unit conversion in storage
summary_storage_parms <- data.frame(read.csv('../data/summary_storage_parms.csv'))
mean_storage_slurry <- summary_storage_parms[summary_storage_parms$parm == 'slurry_mass_mean', ]
#emissions from barn and storage
summary_barn <- data.frame(read.csv('../data/summary_barn.csv'))
summary_storage <- data.frame(read.csv('../data/summary_storage.csv'))
meas_C <- as.data.frame(read_excel('../data/dat_simple.xlsx', sheet = "C"))
# convert emission from averaged g CH4/day to kg CH4/year/m3 slurry excreted from animal
sum_barn_slurry <- data.frame(summarise(group_by(sum_barn_slurry, treatment), slurry_cum = sum(cum_slurry/1000, na.rm = T)))
summary_barn$C <- summary_barn$C/1000 * 365/ (sum_barn_slurry$slurry_cum[sum_barn_slurry$treatment == 'control'] * 365/ summary_barn_parms$scores[summary_barn_parms$treat == 'C' & summary_barn_parms$parm == 'time'])
summary_barn$FF <- summary_barn$FF/1000 * 365/ (sum_barn_slurry$slurry_cum[sum_barn_slurry$treatment == 'frequentflushing'] * 365 / summary_barn_parms$scores[summary_barn_parms$treat == 'FF' & summary_barn_parms$parm == 'time'])
summary_barn$SF <- summary_barn$SF/1000 * 365/ (sum_barn_slurry$slurry_cum[sum_barn_slurry$treatment == 'slurryfunnels'] * 365 / summary_barn_parms$scores[summary_barn_parms$treat == 'SF' & summary_barn_parms$parm == 'time'])
summary_barn$ST <- summary_barn$ST/1000 * 365/ (sum_barn_slurry$slurry_cum[sum_barn_slurry$treatment == 'slurrytrays'] * 365 / summary_barn_parms$scores[summary_barn_parms$treat == 'ST' & summary_barn_parms$parm == 'time'])
# kg CH4 / year / ton slurry ab barn
# convert emission from averaged g CH4/day to kg CH4/year/m3 slurry excreted ab barn
sum_barn_eff_slurry <- summary_barn_parms[summary_barn_parms$parm == 'slurry_mass_eff',] %>% mutate(scores = scores / 1000)
summary_storage$C <- summary_storage$C/1000 * 365 / (sum_barn_eff_slurry$scores[sum_barn_eff_slurry$treat == 'C'] * 365/ summary_barn_parms$scores[summary_barn_parms$treat == 'C' & summary_barn_parms$parm == 'time']) # kg CH4 / year / ton slurry ab barn
summary_storage$FF <- summary_storage$FF/1000 * 365 / (sum_barn_eff_slurry$scores[sum_barn_eff_slurry$treat == 'FF'] * 365 / summary_barn_parms$scores[summary_barn_parms$treat == 'FF' & summary_barn_parms$parm == 'time']) # kg CH4 / year / ton slurry ab barn
summary_storage$SF <- summary_storage$SF/1000 * 365 / (sum_barn_eff_slurry$scores[sum_barn_eff_slurry$treat == 'SF'] * 365 / summary_barn_parms$scores[summary_barn_parms$treat == 'SF' & summary_barn_parms$parm == 'time']) # kg CH4 / year / ton slurry ab barn
summary_storage$ST <- summary_storage$ST/1000 * 365 / (sum_barn_eff_slurry$scores[sum_barn_eff_slurry$treat == 'ST'] * 365 / summary_barn_parms$scores[summary_barn_parms$treat == 'ST' & summary_barn_parms$parm == 'time']) # kg CH4 / year / ton slurry ab barn
# kg CH4 / year / ton slurry present in storage
#mean_storage_slurry <- mean_storage_slurry %>% mutate(scores = scores/1000)
#summary_storage$C <- summary_storage$C/1000 * 365 / mean_storage_slurry$scores[mean_storage_slurry$treat == 'C']
#summary_storage$FF <- summary_storage$FF/1000 * 365 / mean_storage_slurry$scores[mean_storage_slurry$treat == 'FF']
#summary_storage$SF <- summary_storage$SF/1000 * 365 / mean_storage_slurry$scores[mean_storage_slurry$treat == 'SF']
#summary_storage$ST <- summary_storage$ST/1000 * 365 / mean_storage_slurry$scores[mean_storage_slurry$treat == 'ST']
summary_net <- cbind(summary_barn[, !names(summary_barn) %in% c('alpha_opt','qhat_opt')] + summary_storage[, !names(summary_storage) %in% c('alpha_opt','qhat_opt')], summary_barn[, c('alpha_opt', 'qhat_opt')])
summary_dat <- rbind(cbind(summary_barn, source = 'Barn'), cbind(summary_storage, source = 'Storage'), cbind(summary_net, source = 'Net'))
summary_dat$reduction_FF <- (1 - summary_dat$FF/summary_dat$C) * 100
summary_dat$reduction_SF <- (1 - summary_dat$SF/summary_dat$C) * 100
summary_dat$reduction_ST <- (1 - summary_dat$ST/summary_dat$C) * 100
# Clean and reshape
ref_emis$animal <- factor(ref_emis$animal, levels = c('Finisher', 'Gestating sow', 'Farrowing sow', 'Weaner'))
summary_dat_long <- summary_dat %>% pivot_longer(c(reduction_FF, reduction_SF, reduction_ST),
names_to = 'treat', values_to = 'reduction')
summary_dat_long$source <- factor(summary_dat_long$source, levels = c("Barn", "Storage", "Net"))
new.lab <- as_labeller(c(reduction_FF = "W.~flush.~(WF)", reduction_SF = "S.~funnels.~(SF)", reduction_ST= "Slurry~trays~(ST)",
Barn = "Barn", Storage = "Storage", Net = "Net"), label_parsed)
# More data processing for plot
summary_dat_long <- data.table(summary_dat_long)
summary_dat_long$varied <- NA
summary_dat_long$varied[summary_dat_long$alpha_opt == 1] <- 'a qhat'
summary_dat_long$varied[summary_dat_long$qhat_opt == 1] <- 'b alpha'
summary_dat_long$varied[summary_dat_long$qhat_opt != 1 & summary_dat_long$alpha_opt != 1] <- 'c both'
summary_dat_long$x <- summary_dat_long$qhat_opt
summary_dat_long$x[summary_dat_long$qhat_opt == 1] <- summary_dat_long$alpha_opt[summary_dat_long$qhat_opt == 1]
summary_dat_long$x <- log10(summary_dat_long$x)
ref1 <- summary_dat_long[summary_dat_long$qhat_opt == 1 & summary_dat_long$alpha_opt == 1, ]
ref1$varied <- NULL
ref1 <- dfcombos(ref1, data.frame(varied = unique(summary_dat_long$varied)))
summary_dat_long <- rbind(summary_dat_long, ref1)
summary_dat_long <- summary_dat_long[order(summary_dat_long$varied, summary_dat_long$qhat_opt * summary_dat_long$alpha_opt), ]
ref <- unique(summary_dat_long[, c('C', 'alpha_opt', 'qhat_opt', 'varied', 'x', 'source')])
ref$treat <- 'Control (C)'
# Plots
cols <- scales::hue_pal()(3)
dd <- subset(ref, alpha_opt == 1 & qhat_opt == 1)
refplot <- ggplot(ref, aes(x, C, colour = varied)) +
geom_point(data = dd, colour = 'gray55', size = 2) +
geom_path() +
theme_bw() +
facet_grid(source~factor(treat)) +
labs(x = expression('Log'[10]~'par. adj.'), y = expression('Emission rate'~(kg~CH[4]~m^'-3'~yr^'-1')), tag = 'B') +
scale_colour_manual(name = 'Parameter', values = cols,
labels = expression(q['max, opt'], alpha['opt'], 'Both')) +
theme(legend.position = 'none')
refplot
dd <- subset(summary_dat_long, alpha_opt == 1 & qhat_opt == 1)
redplot <- ggplot(summary_dat_long, aes(x, reduction, colour = varied)) +
geom_point(data = dd, colour = 'gray55', size = 2) +
geom_path() +
theme_bw() +
facet_grid(source~treat, labeller = new.lab, scales = 'free_y') +
labs(x = expression('Log'[10]~'parameter adjustment'), y = 'Emission reduction (%)', tag = 'C') +
theme(legend.position = 'right') +
scale_colour_manual(name = 'Parameter', values = cols,
labels = expression(q['max, opt'], alpha['opt'], 'Both'))
redplot
refemisplot <- ggplot(ref_emis, aes(x = animal, y = CH4)) + geom_boxplot(varwidth = TRUE) + geom_jitter(width = 0.2) + theme_bw() +
labs(x ="", y = expression('Methane emission rate'~(g~pig^'-1'~d^'-1')), colour = "", tag = 'A') +
stat_summary(fun.y ="mean", color="red")
p_all <- grid.arrange(refemisplot, refplot, redplot, widths = c(1.5,4), heights = c(2.5,4), layout_matrix = rbind(c(1), c(2,3)))
svglite("../figures/fig_predict.svg", width = 18/2.54, height = 18/2.54)
grid::grid.draw(p_all)
dev.off()
png('../figures/fig_predict.png',  width = 18/2.54, height = 18/2.54, units = 'in', res = 600)
grid::grid.draw(p_all)
dev.off()
pdf('../figures/fig_predict.pdf',  width = 18/2.54, height = 18/2.54)
grid::grid.draw(p_all)
dev.off()
# summarise results
sum_reference <- filter(summary_dat_long, alpha_opt == 1, qhat_opt == 1)
summarise(group_by(summary_dat_long, treat, source), mean(C, na.rm = T), min(reduction, na.rm = T), max(reduction, na.rm = T), mean(reduction, na.rm = T), median(reduction, na.rm = T))
# get results from reference situation and emission ratio
barn_reference <- data.table(summary_barn)[alpha_opt == 1.0 & qhat_opt == 1.0, C]
storage_reference <- data.table(summary_storage)[alpha_opt == 1.0 & qhat_opt == 1.0, C]
barn_reference/(storage_reference + barn_reference)
# check reasons for reductions in storage with frequent flushing techniques
summary_storage_parms <- data.frame(read.csv('../data/summary_storage_parms.csv'))
ggplot(summary_storage_parms, aes(x = treat, y = scores)) + geom_point() + facet_wrap(~parm, scales = "free")
grid::grid.draw(p_all)
# Create emission rate figure
rm(list = ls())
# Packages
library(ggplot2)
library(data.table)
library(lubridate)
library(reshape2)
# Other functions
source('../functions/rbindf.R')
source('../functions/dfcombos.R')
source('../functions/ggsave2x.R')
# Language for date labels
Sys.setlocale("LC_ALL", "English")
# Load data
dat <- fread('../data/dat_stacked.csv')
per <- read.csv('../data/periods.csv')
# Some cleaning
dat$date.time <- ymd_hms(dat$date)
dat$doy <- as.integer(as.character(dat$date.time, format = '%j'))
dat$date <- as.Date(dat$date.time)
per$date.time.in <- dmy_hm(paste(per$date.in, '12:00'))
per$date.time.out <- dmy_hm(paste(per$date.out, '12:00'))
per$date.in <- dmy(per$date.in)
per$date.out <- dmy(per$date.out)
# Pull out separate temeprature data
tdat <- subset(dat, !is.na(temp) & (treatment == 'control' | treatment == 'frequentflushing'))
dat <- subset(dat, !is.na(period))
# Normalize emission to 1 pig (already done for CO2)
dat$NH3_emis_rate <- dat$NH3_emis_rate  / dat$pigs
dat$H2S_emis_rate <- dat$H2S_emis_rate  / dat$pigs
dat$CH4_emis_rate <- dat$CH4_emis_rate  / dat$pigs
# Reshape
dl <- as.data.table(melt(dat, id.vars = c('treatment', 'date', 'date.time', 'doy', 'period', 'pigs'),
measure.vars = c('CH4_emis_rate', 'CO2_emis_rate', 'NH3_emis_rate', 'H2S_emis_rate')))
dl$variable <- factor(dl$variable, levels = c('CH4_emis_rate', 'CO2_emis_rate', 'NH3_emis_rate', 'H2S_emis_rate'),
labels = c('Methane', 'Carbon dioxide', 'Ammonia', 'Hydrogen sulfide'))
dl$treatment <- factor(dl$treatment, levels = c('control', 'frequentflushing', 'slurryfunnels', 'slurrytrays'),
labels = c('Control (C)', 'Weekly\nflushing (WF)\n', 'Slurry\nfunnels (SF)\n', 'Slurry\ntrays (ST)\n'))
# Daily average emission rate
dl$date.group <- as.integer(dl$date - min(dl$date)) %/% 5
# Daily for all except . . .
dl1 <- dl[variable != 'Hydrogen sulfide', .(emis.ave = mean(value)), by = .(treatment, period, date, pigs, variable)]
# . . . use multi-day average for H2S
dl2 <- dl[variable == 'Hydrogen sulfide', .(emis.ave = mean(value), date = mean(date)),
by = .(treatment, period, date.group, pigs, variable)]
dl <- rbindf(dl1, dl2)
# Emission rate per pig
dl$emis.pig.d <- dl$emis.ave / dl$pigs
dl$value[is.na(dl$period)] <- NA
# Drop H2S in missing periods
dl <- subset(dl, variable != 'Hydrogen sulfide' | !period %in% 2:3)
# Drop NAs
dl <- subset(dl, !is.na(emis.ave) & !is.na(treatment))
# Add NAs for start and end of periods to break lines in plots
dl <- rbindf(dl, expand.grid(date = c(per$date.in, per$date.out),
treatment = na.omit(unique(dl$treatment)),
variable = unique(dl$variable),
value = NA))
dl <- dl[order(dl$variable, dl$date), ]
ep <- ggplot(dl, aes(date, emis.ave, colour = treatment)) +
geom_line(alpha = 0.5) +
geom_point(alpha = 0.7, size = 0.3) +
facet_grid(variable ~ ., scales = 'free') +
labs(x = 'Date', y = expression('Emission rate'~(g~pig^'-1'~d^'-1')), colour = '') +
xlim(as.Date(c('2020-05-30', '2021-04-30'))) +
geom_vline(xintercept = c(per$date.in, per$date.out), lty = 2, col = 'gray65') +
theme_bw() +
theme(legend.position = 'top',
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Sort out temperature data
ta <- tdat[, .(temp.ave = mean(temp, na.rm = TRUE)), by = .(date, period, treatment)]
ta <- rbindf(ta, data.frame(date = c(per$date.in, per$date.out), period = NA, temp.ave = NA))
ta$temp.ave[is.na(ta$period)] <- NA
ta$variable <- 'Temperature'
ta <- subset(ta, !is.na(temp.ave) | is.na(period))
ta$treatment <- factor(ta$treatment, levels = c('control', 'frequentflushing', 'slurryfunnels', 'slurrytrays'),
labels = c('Control (C)', 'Weekly\nflushing (WF)\n', 'Slurry\nfunnels (SF)\n', 'Slurry\ntrays (ST)\n'))
ta <- ta[!is.na(ta$treatment), ]
# Make some date labels
dd <- expand.grid(2020:2021, 1:12, 1)
ddl <- as.Date(paste(dd[, 1], dd[, 2], dd[, 3], sep = '-'))
cc <- scales::hue_pal()(4)[1:2]
tp <- ggplot(ta, aes(date, temp.ave, colour = treatment)) +
geom_line() +
geom_point(alpha = 0.7, size = 0.3) +
labs(x = 'Date', y = expression('Slurry temp.'~('\u00b0'*C)), colour = '') +
facet_grid(variable ~ ., scales = 'free') +
geom_vline(xintercept = c(per$date.in, per$date.out), lty = 2, col = 'gray65') +
scale_x_date(breaks = ddl, labels = format(ddl, '%b'), limits = as.Date(c('2020-05-30', '2021-04-30'))) +
scale_colour_manual(values = cc) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
theme(legend.position = 'none')
# NTS: #@! stupid ggplotGrob() makes some kind of table and the number of columns need to match to use
# NTS: rbind() as below
# NTS: the theme(legend.position =) is needed in tp to  get 12 x 10 instead of the 12 x 12 we get without it
# NTS: I cannot find any description of the 12 x 10 etc. and str() gives a massive object with
# NTS: without clear info on what the 12 x 10 or 12 x 12 is
png('../figures/fig_emis_temp.png', height = 7, width = 6.5, units = 'in', res = 600)
grid::grid.draw(rbind(ggplotGrob(ep), ggplotGrob(tp)))
dev.off()
pdf('../figures/fig_emis_temp.pdf', height = 7, width = 6.5)
grid::grid.draw(rbind(ggplotGrob(ep), ggplotGrob(tp)))
dev.off()
rm(list = ls())
source('../scripts/process_data.R')
library('dplyr')
library('tidyr')
comp_summary <- summarise(group_by(dat_analysis, period, treatment), DM = mean(DM, na.rm = TRUE), VS = mean(VS, na.rm = TRUE),
pH = mean(pH, na.rm = TRUE), TN = mean(TN, na.rm = TRUE), TAN = mean(TAN, na.rm = TRUE))
comp_summary_year <- summarise(group_by(comp_summary, treatment), mean_DM = mean(DM, na.rm = TRUE), mean_VS = mean(VS, na.rm = TRUE),
mean_pH = mean(pH, na.rm = TRUE), mean_TN = mean(TN, na.rm = TRUE), mean_TAN = mean(TAN, na.rm = TRUE),
sd_DM = sd(DM, na.rm = TRUE), sd_VS = sd(VS, na.rm = TRUE),
sd_pH = sd(pH, na.rm = TRUE), sd_TN = sd(TN, na.rm = TRUE), sd_TAN = sd(TAN, na.rm = TRUE))
vfa_dat_sum <- summarise(group_by(dat_vfa, period, treatment), vfa = mean(vfa/1000, na.rm = TRUE))
vfa_summary <- summarise(group_by(vfa_dat_sum, treatment), mean = mean(vfa, na.rm = TRUE), std = sd(vfa, na.rm = TRUE))
temp_summary <- summarise(group_by(dat_stacked, period, treatment), temp_air = mean(temp_air, na.rm = TRUE), temp = mean(temp, na.rm = TRUE))
temp_summary_year <- summarise(group_by(temp_summary, treatment), mean_temp_air = mean(temp_air, na.rm = TRUE), mean_temp = mean(temp, na.rm = TRUE),
std_temp_air = sd(temp_air, na.rm = TRUE), std_temp = sd(temp, na.rm = TRUE))
mass_summary <- dat_stacked %>% select(mass, period, treatment) %>% filter(!is.na(mass), !is.na(period)) %>%
group_by(treatment, period) #%>% summarise(mass.mean = mean(mass, na.rm =T)) %>% group_by(treatment) %>%
View(mass_summary)
mass_summary <- dat_stacked %>% select(mass, period, treatment) %>% filter(!is.na(mass), !is.na(period)) %>%
group_by(treatment, period) %>% summarise(mass.mean = mean(mass, na.rm =T)) #%>% group_by(treatment) %>%
View(mass_summary)
# Runs all scenarios for sensitivity predicitons
rm(list = ls())
# Load R functions
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
# Get packages
abm_packages()
